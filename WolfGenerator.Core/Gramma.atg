using System;
using System.Text;
using System.Collections.Generic;
using WolfGenerator.Core.AST;
using WolfGenerator.Core.Writer;

COMPILER WolfGenerator

	public RuleClassStatement ruleClassStatement;
	
	string ExtractString( bool isStart, bool ifEnd, int startPos, int endPos )
	{
		string text = scanner.buffer.GetString( startPos, endPos );
		return ExtractString( isStart, ifEnd, text );
	}
	
	string ExtractString( bool isStart, bool ifEnd, string text )
	{
		int startIndex = 0;
		int endIndex = 0;
		return ExtractString( isStart, ifEnd, text, ref startIndex, ref endIndex );
	}
	
	string ExtractString( bool isStart, bool ifEnd, string text, ref int startIndex, ref int endIndex )
	{
		if (!string.IsNullOrEmpty( text ))
		{
			startIndex = 0;
			endIndex = 0;
			if (isStart)
			{
				if (text.StartsWith( "\r\n" )) startIndex = 2;
				else if (text.StartsWith( "\n" )) startIndex = 1;
			}
			if (ifEnd)
			{
				if (text.EndsWith( "\r\n" )) endIndex = 2;
				else if (text.EndsWith( "\n" )) endIndex = 1;
			}
			if (text.Length - endIndex - startIndex > 0)
			{
				if (startIndex > 0 || endIndex > 0) return text.Substring( startIndex, text.Length - endIndex - startIndex );				
				else return text;
			}
		}
		return "";
	}
	
	int AddStatement( bool isStart, List<RuleStatement> statements, bool ifEnd, string text )
	{
		text = ExtractString( isStart, ifEnd, text );
		if (!string.IsNullOrEmpty( text )) statements.Add( new TextStatement( new StatementPosition( t.line, t.col, t.pos, la.line, la.col, la.pos ), text ) );
		return la.pos;
	}

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS

	ident        = ['@'] letter { letter | digit }.
	
	ruleClass    = "<%ruleclass".
	rule         = "<%rule".
	join         = "<%join".
	apply        = "<%apply".
	call         = "<%call".
	method       = "<%method".
	match        = "<%match".
	uses         = "<%using".
	endStatement = "%>".
	end          = "<%end%>".
	value        = "<%=".
	code         = "<%$".
	codeEnd1     = "$%>".
	codeEnd2     = "$-%>".
	
	from         = "from".
	with         = "with".
	space        = "Space".
	clone        = "Clone".
	
	dot          = ".".
	comma        = ",".
	openB        = "(".
	closB        = ")".
	openB1       = "([".
	closB1       = "])".
	openG        = "<".
	closG        = ">".

	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.
	
	text
	
IGNORE cr + lf + tab


PRODUCTIONS

WolfGenerator =                                                                    (. Token start = t;
                                                                                      List<UsingStatement> usingStatementList = null; 
                                                                                      List<RuleClassMethodStatement> ruleMethodStatementList = null; 
                                                                                      string name; .) 
                RuleClassStart<out name> 
                {                                                                  (. UsingStatement usingStatement; .)
                 Using<out usingStatement>                                         (. if (usingStatementList == null) usingStatementList = new List<UsingStatement>();
                                                                                      usingStatementList.Add( usingStatement ); .)
                }
                {                                                                  (. RuleMethodStatement ruleMethod; .)
                 RuleMethod<out ruleMethod>                                        (. if (ruleMethodStatementList == null) 
                                                                                          ruleMethodStatementList = new List<RuleClassMethodStatement>();
                                                                                      ruleMethodStatementList.Add( ruleMethod ); .)
                 |                                                                 (. MethodStatement method; .)
                 Method<out method>                                                (. if (ruleMethodStatementList == null) 
                                                                                          ruleMethodStatementList = new List<RuleClassMethodStatement>();
                                                                                      ruleMethodStatementList.Add( method ); .)
                } 
                RuleClassEnd                                                       (. ruleClassStatement = new RuleClassStatement( new StatementPosition( start, t ), name, usingStatementList, ruleMethodStatementList ); .)
                .

RuleClassStart<out string name> = "<%ruleclass" ident                              (. name = t.val; .)
                                   "%>".
RuleClassEnd   = "<%end%>".

Using<out UsingStatement usingStatement>                                           (. List<string> namespaceList = new List<string>(); .) 
=
	"<%using" 	                                                                   (. Token start = t; .)
	ident                                                                          (. namespaceList.Add( t.val ); .)
	{ "."  ident                                                                   (. namespaceList.Add( t.val ); .)
	}                                                                              (. string namespaceName = string.Join( ".", namespaceList.ToArray() );
	                                                                                  usingStatement = new UsingStatement( new StatementPosition( start, t ), namespaceName ); .)
	"%>".
	
MatchMethod<out MatchMethodStatement statement>                                    (. string name; string code; .)
                   =
                     "<%match"                                                     (. Token start = t; .)
                     ident                                                         (. name = t.val; .)
                     "%>"                                                          (. int startPos = t.pos + t.val.Length; .)
                     {ANY}                                                         (. code = ExtractString( true, true, startPos, la.pos ); .)
                     "<%end%>"                                                     (. statement = new MatchMethodStatement( new StatementPosition( start, t ), name, code ); .)
                     .

RuleMethod<out RuleMethodStatement statement>                                      (. string methodName; IList<Variable> variables;
                                                                                      List<RuleStatement> statements = new List<RuleStatement>();
                                                                                      bool isStart = true;
                                                                                      ValueStatement valueStatement;
                                                                                      JoinStatement joinStatement;
                                                                                      CodeStatement codeStatement;
                                                                                      CallStatement callStatement;
                                                                                      MatchMethodStatement matchStatement = null; .)
                    = 	                                                           (. Token start = t; .)
                     [ MatchMethod<out matchStatement> ]
                     RuleMethodStart<out methodName, out variables>                (. int startPos = t.pos + t.val.Length; .)
                     { 
                      text                                                         (. AddStatement( isStart, statements, la.kind == _end, t.val ); .)
                      |
                      Value<out valueStatement>                                    (. statements.Add( valueStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      
                      |                                                            
                      Join<out joinStatement>                                      (. statements.Add( joinStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      
                      |                                                            
                                                                                   (. isStart = false; .)
                      Code<out codeStatement, ref isStart>                         (. statements.Add( codeStatement ); startPos = t.pos + t.val.Length; .)
                      
                      |                                                            
                      Call<out callStatement>                                      (. statements.Add( callStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      } 
                                                                                   
                      RuleMethodEnd                                                (. statement = new RuleMethodStatement( new StatementPosition( start, t ), matchStatement, methodName, variables, statements ); .)
                      .

RuleMethodStart <. out string name, out IList<Variable> variables .>               (. Variable var = null; 
                                                                                      List<Variable> variableList = null; .)
                = "<%rule" ident                                                   (. name = t.val; .) 
                  "(" [ Var<out var>                                               (. if (variableList == null) variableList = new List<Variable>();
                                                                                      variableList.Add( var ); .)
                        { "," Var<out var>                                         (. variableList.Add( var ); .)
                        } ] WEAK ")" SYNC "%>"                                     (. variables = variableList == null ? null : variableList.AsReadOnly(); .)
                  .
RuleMethodEnd   = SYNC "<%end%>".

Method <out MethodStatement methodStatement>                                       (. WolfGenerator.Core.AST.Type returnType;
                                                                                      List<Variable> variables = null;
                                                                                      int startPos = -1; string name; .)
                =
                  "<%method"                                                       (. Token start = t; .)
                  Type<out returnType>
                  ident                                                            (. name = t.val; .)
                  "("                                                              (. Variable currentVariable; .)
                  [ Var<out currentVariable>                                       (. if (variables == null) variables = new List<Variable>();
                                                                                          variables.Add( currentVariable ); .)
                    { "," 
                     Var<out currentVariable>                                      (. variables.Add( currentVariable ); .)
                    }
                  ] ")" "%>"                                                       (. startPos = t.pos + t.val.Length; .)
                  {ANY}
                  "<%end%>"                                                        (. methodStatement = new MethodStatement( new StatementPosition( start, t ), returnType, name, variables, ExtractString( true, false, startPos, t.pos ) ); .)
                  .

Value<out ValueStatement valueStatement>
                = 
                  "<%="                                                            (. Token start = t; int pos = t.pos + t.val.Length; .)
                  {ANY}
                  SYNC "%>"                                                        (. int endPos = t.pos;
                                                                                      string value = scanner.buffer.GetString( pos, endPos );
                                                                                      valueStatement = new ValueStatement( new StatementPosition( start, t ), value.Trim() );  .)
                  .

Join<out JoinStatement joinStatement>                                              (. string @string;
                                                                                      List<RuleStatement> statements = null;
                                                                                      ValueStatement valueStatement;
                                                                                      ApplyStatement applyStatement;
                                                                                      CallStatement callStatement; 
                                                                                      AppendType appendType = AppendType.EmptyLastLine; .)
                = 
                  "<%join" 	                                                       (. Token start = t; .)
                  string                                                           (. @string = t.val.Substring( 1, t.val.Length - 2 ); .)
                  ["with"
                   ("Space"                                                        (. appendType = AppendType.SpaceLastLine; .)
                    | 
                    "Clone"                                                        (. appendType = AppendType.CloneLastLine; .)
                   )
                  ]
                  "%>" 
                  {                    
                    Value<out valueStatement>                                      (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( valueStatement ); .)
                    |
                    Apply<out applyStatement>                                      (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( applyStatement ); .)
                    |
                    Call<out callStatement>                                        (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( callStatement ); .)
                  }
                  SYNC "<%end%>"                                                   (. joinStatement = new JoinStatement( new StatementPosition( start, t ), @string, appendType, statements ); .)
                  .
                  
Apply<out ApplyStatement applyStatement>                                           (. string methodName; string parameters = null; string from; .)
                =
                  "<%apply" 	                                                   (. Token start = t; .)
                  ident                                                            (. methodName = t.val; .)
                   (                                                               (. int startPos = -1; int endPos = -1; .)
                     (
                      "(["                                                         (. startPos = t.pos + t.val.Length; .)
						{ ANY }                                                    (. endPos = la.pos; .)
					  "])" 
					  |
                      "("                                                          (. startPos = t.pos + t.val.Length; .)
                        { ANY }                                                    (. endPos = la.pos; .)
                      ")"
                     )                                                             (. if (startPos > 0 && endPos > 0)
                                                                                          parameters = scanner.buffer.GetString( startPos, endPos ).Trim(); .)
                   )                                                              
                   SYNC "from"                                                     (. int startFrom = la.pos; .)
                   {ANY}                                                           (. from = scanner.buffer.GetString( startFrom, la.pos ).Trim(); .)
                   SYNC "%>"                                                       (. applyStatement = new ApplyStatement( new StatementPosition( start, t ), methodName, parameters, from ); .)
                   .
Code<out CodeStatement codeStatement, ref bool isStart>
                =
                  "<%$"                                                            (. Token start = t; int startPos = t.pos + t.val.Length; .)
                   {ANY}                                                           (. string value = scanner.buffer.GetString( startPos, la.pos ); .) 
                  ("$%>"
                   | "$-%>"                                                        (. isStart = true; .)
                  )
                                                                                   (. codeStatement = new CodeStatement( new StatementPosition( start, t ), value.Trim() ); .)
                  .
                  
Call<out CallStatement callStatement>                                              (. string methodName; string parameters = null; .)
                =
                  "<%call" 	                                                       (. Token start = t; .)
                  ident                                                            (. methodName = t.val; .)
                   (                                                               (. int startPos = -1; int endPos = -1; .)
                     (
                      "(["                                                         (. startPos = t.pos + t.val.Length; .)
						{ ANY }                                                    (. endPos = la.pos; .)
					  "])" 
					  |
                      "("                                                          (. startPos = t.pos + t.val.Length; .)
                        { ANY }                                                    (. endPos = la.pos; .)
                      ")"
                     )                                                             (. if (startPos > 0 && endPos > 0)
                                                                                          parameters = scanner.buffer.GetString( startPos, endPos ).Trim(); .)
                   )                                                              
                   SYNC "%>"                                                       (. callStatement = new CallStatement( new StatementPosition( start, t ), methodName, parameters ); .)
                   .


Type<out WolfGenerator.Core.AST.Type type> =                                       (. StringBuilder name = new StringBuilder(); 
                                                                                      List<WolfGenerator.Core.AST.Type> genericParameters = null; .)
       ident                                                                       (. Token start = t; name.Append( t.val ); .)
        { "." 
        ident                                                                      (. name.Append( '.' ); name.Append( t.val ); .)
        } [                                                                        (. genericParameters = new List<WolfGenerator.Core.AST.Type>();
                                                                                      WolfGenerator.Core.AST.Type generic; .)
        "<" Type<out generic>                                                      (. genericParameters.Add( generic ); .)
        { "," Type<out generic>                                                    (. genericParameters.Add( generic ); .)
        } ">" ]                                                                    (. type = new WolfGenerator.Core.AST.Type( new StatementPosition( start, t ), name.ToString(), genericParameters ); .)
        .

Var<out Variable var> =                                                            (. WolfGenerator.Core.AST.Type type; Token start = t; .)
      Type<out type> ident                                                         (. var = new Variable( new StatementPosition( start, t ), t.val, type ); .)
      .

END WolfGenerator.