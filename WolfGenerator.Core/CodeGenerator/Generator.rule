<%ruleclass Generator%>
<%using System.Linq%>
<%using WolfGenerator.Core.AST%>

<%rule Generate( string @namespace, RuleClassStatement ruleClassStatement, string fileName )%>
<%join "\r\n"%>
	<%apply Using( item ) from ruleClassStatement.UsingStatements.Select( u => u.Namespace ).Concat( defaultNamespaces ).Distinct() %>
<%end%>

<%$
if (@namespace != null)
{
$-%>
namespace <%= @namespace %>
{
	<%call Class( ruleClassStatement, fileName )%>
}
<%$
}
else
{
$-%>
<%call Class( ruleClassStatement, fileName )%>
<%$
}
$-%>
<%end%>

<%rule Class( RuleClassStatement ruleClassStatement, string fileName )%>
public partial class <%= ruleClassStatement.Name %> : GeneratorBase
{
	<%join "\r\n\r\n"%>
		<%apply Method( item, fileName ) from ruleClassStatement.RuleMethodStatements.OfType<MethodStatement>()%>
		
		<%apply Match( item, fileName ) from ruleClassStatement.MatchMethodGroups.Where( mmg => mmg.IsMatched ).SelectMany( mmg => mmg.RuleMethodStatements ).Select( ms => ms.MatchMethodStatement )%>

		<%apply Rule( item, fileName, false, true ) from ruleClassStatement.MatchMethodGroups.Where( mmg => mmg.IsMatched ).SelectMany( mmg => mmg.RuleMethodStatements )%>
		<%apply Rule( item, fileName, true,  true ) from ruleClassStatement.MatchMethodGroups.Where( mmg => mmg.IsMatched && mmg.DefaultStatement != null ).Select( mmg => mmg.DefaultStatement )%>
		
		<%apply Rule( item, fileName, false, false ) from ruleClassStatement.MatchMethodGroups.Where( mmg => !mmg.IsMatched ).Select( mmg => mmg.DefaultStatement )%>
	<%end%>
}
<%end%>

<%rule Match( MatchMethodStatement matchMethodStatement, string fileName )%>
[MatchMethod( "<%= matchMethodStatement.RuleMethod.Name %>", "<%= matchMethodStatement.Name %>", "<%= fileName %>" )]
private bool Match_<%= matchMethodStatement.RuleMethod.Name %>_<%= matchMethodStatement.Name %>(<%call MethodParamenters( matchMethodStatement.RuleMethod.Variables ) %>)
{
	<%= matchMethodStatement.Code %>
}
<%end%>

<%rule Rule( RuleMethodStatement ruleMethodStatement, string fileName, bool isDefault, bool generateAttribute )%>
<%$
if (generateAttribute)
{
$-%>
[RuleMethod( "<%= ruleMethodStatement.Name %>", <%$ if (ruleMethodStatement.MatchMethodStatement != null){$%>"<%= ruleMethodStatement.MatchMethodStatement.Name %>"<%$}else{$%>null<%$}$%>, "<%= fileName %>" )]
<%$
}
$-%>
public CodeWriter <%= ruleMethodStatement.Name %><%$if (ruleMethodStatement.MatchMethodStatement != null){$%>_<%= ruleMethodStatement.MatchMethodStatement.Name %><%$}else if (isDefault){$%>_Default<%$}$%>(<%call MethodParamenters( ruleMethodStatement.Variables ) %>)
{
	var writer = new CodeWriter();

	<%join "\r\n"%>
		<%apply Statement( item, "writer" ) from ruleMethodStatement.Statements %>
	<%end%>

	return writer;
}
<%end%>

<%rule Method( MethodStatement method, string fileName )%>
public <%= method.ReturnType.ToString() %> <%= method.Name %>(<%call MethodParamenters( method.Variables ) %>)
{
	<%= method.Code %>
}
<%end%>

<%rule Using( UsingStatement usingStatement )%>
<%call Namespace( usingStatement.Namespace ) %>
<%end%>

<%rule Using( string @namespace )%>
using <%= @namespace %>;
<%end%>

<%rule MethodParamenters( IEnumerable<Variable> variables )%>
 <%join ", "%>
	<%apply Parameter( item ) from variables %>
<%end%> 
<%end%>

<%rule Parameter( Variable var )%>
<%= var.ToString() %>
<%end%>

<%end%>