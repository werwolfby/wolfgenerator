using System;
using System.Text;
using System.Collections.Generic;
using WolfGenerator.Core.AST;

COMPILER WolfGenerator

	public RuleClassStatement ruleClassStatement;
	
	int AddStatement( bool isStart, int startPos, List<RuleStatement> statements, bool ifEnd )
	{
		string text = scanner.buffer.GetString( startPos, la.pos );
		if (!string.IsNullOrEmpty( text ))
		{
			int startIndex = 0;
			int endIndex = 0;
			if (isStart)
			{
				if (text.StartsWith( "\r\n" )) startIndex = 2;
				else if (text.StartsWith( "\n" )) startIndex = 1;
			}
			if (ifEnd)
			{
				if (text.EndsWith( "\r\n" )) endIndex = 2;
				else if (text.EndsWith( "\n" )) endIndex = 1;
			}
			if (text.Length - endIndex - startIndex > 0)
			{
				if (startIndex > 0 || endIndex > 0) text = text.Substring( startIndex, text.Length - endIndex - startIndex );
				statements.Add( new TextStatement( text ) );
			}
		}
		return la.pos;
	}

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS

	ident     = letter { letter | digit }.

	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

IGNORE cr + lf + tab


PRODUCTIONS

WolfGenerator =                                                                    (. List<UsingStatement> usingStatementList = null; 
                                                                                      List<RuleClassMethodStatement> ruleMethodStatementList = null; 
                                                                                      string name; .) 
                RuleClassStart<out name> 
                {                                                                  (. UsingStatement usingStatement; .)
                 Using<out usingStatement>                                         (. if (usingStatementList == null) usingStatementList = new List<UsingStatement>();
                                                                                      usingStatementList.Add( usingStatement ); .)
                }
                {                                                                  (. RuleMethodStatement ruleMethod; .)
                 RuleMethod<out ruleMethod>                                        (. if (ruleMethodStatementList == null) 
                                                                                          ruleMethodStatementList = new List<RuleClassMethodStatement>();
                                                                                      ruleMethodStatementList.Add( ruleMethod ); .)
                 |                                                                 (. MethodStatement method; .)
                 Method<out method>                                                (. if (ruleMethodStatementList == null) 
                                                                                          ruleMethodStatementList = new List<RuleClassMethodStatement>();
                                                                                      ruleMethodStatementList.Add( method ); .)
                } 
                RuleClassEnd                                                       (. ruleClassStatement = new RuleClassStatement( name, usingStatementList, ruleMethodStatementList ); .)
                .

RuleClassStart<out string name> = "<%ruleclass" ident                              (. name = t.val; .)
                                   "%>".
RuleClassEnd   = "<%end%>".

Using<out UsingStatement usingStatement>                                                            
(. List<string> namespaceList = new List<string>(); .) 
=
	"<%using" ident                                                                (. namespaceList.Add( t.val ); .)
	{ "."  ident                                                                   (. namespaceList.Add( t.val ); .)
	}                                                                              (. string namespaceName = string.Join( ".", namespaceList.ToArray() );
	                                                                                  usingStatement = new UsingStatement( namespaceName ); .)
	"%>".

RuleMethod<out RuleMethodStatement statement>                                      (. string methodName; IList<Variable> variables;
                                                                                      List<RuleStatement> statements = new List<RuleStatement>();
                                                                                      bool isStart = true;
                                                                                      ValueStatement valueStatement;
                                                                                      JoinStatement joinStatement;
                                                                                      CodeStatement codeStatement;
                                                                                      CallStatement callStatement; .)
                    = RuleMethodStart<out methodName, out variables>               (. int startPos = t.pos + t.val.Length; .)
                     { 
                      ANY 
                      |                                                            (. AddStatement( isStart, startPos, statements, false ); .)
                      Value<out valueStatement>                                    (. statements.Add( valueStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      
                      |                                                            (. AddStatement( isStart, startPos, statements, false ); .)
                      Join<out joinStatement>                                      (. statements.Add( joinStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      
                      |                                                            (. AddStatement( isStart, startPos, statements, false ); .)
                                                                                   (. isStart = false; .)
                      Code<out codeStatement, ref isStart>                         (. statements.Add( codeStatement ); startPos = t.pos + t.val.Length; .)
                      
                      |                                                            (. AddStatement( isStart, startPos, statements, false ); .)
                      Call<out callStatement>                                      (. statements.Add( callStatement ); isStart = false; startPos = t.pos + t.val.Length; .)
                      } 
                                                                                   (. AddStatement( isStart, startPos, statements, true ); .)
                      RuleMethodEnd                                                (. statement = new RuleMethodStatement( methodName, variables, statements ); .)
                      .

RuleMethodStart <. out string name, out IList<Variable> variables .>               (. Variable var = null; 
                                                                                      List<Variable> variableList = null; .)
                = "<%rule" ident                                                   (. name = t.val; .) 
                  "(" [ Var<out var>                                               (. if (variableList == null) variableList = new List<Variable>();
                                                                                      variableList.Add( var ); .)
                        { "," Var<out var>                                         (. variableList.Add( var ); .)
                        } ] WEAK ")" SYNC "%>"                                               (. variables = variableList.AsReadOnly(); .)
                  .
RuleMethodEnd   = SYNC "<%end%>".

Method <out MethodStatement methodStatement>                                       (. WolfGenerator.Core.AST.Type returnType;
                                                                                      List<Variable> variables = null;
                                                                                      int startPos = -1; string name; .)
                =
                  "<%method" Type<out returnType>
                  ident                                                            (. name = t.val; .)
                  "("                                                              (. Variable currentVariable; .)
                  [ Var<out currentVariable>                                       (. if (variables == null) variables = new List<Variable>();
                                                                                          variables.Add( currentVariable ); .)
                    { "," 
                     Var<out currentVariable>                                      (. variables.Add( currentVariable ); .)
                    }
                  ] ")" "%>"                                                       (. startPos = t.pos + t.val.Length; .)
                  {ANY}
                  "<%end%>"                                                        (. methodStatement = new MethodStatement( returnType, name, variables, scanner.buffer.GetString( startPos, t.pos ) ); .)
                  .

Value<out ValueStatement valueStatement>
                = 
                  "<%="                                                            (. int pos = t.pos + t.val.Length; .)
                  {ANY}
                  SYNC "%>"                                                        (. int endPos = t.pos;
                                                                                      string value = scanner.buffer.GetString( pos, endPos );
                                                                                      valueStatement = new ValueStatement( value.Trim() );  .)
                  .

Join<out JoinStatement joinStatement>                                              (. string @string;
                                                                                      List<RuleStatement> statements = null;
                                                                                      ValueStatement valueStatement;
                                                                                      ApplyStatement applyStatement;
                                                                                      CallStatement callStatement; .)
                = 
                  "<%join" string                                                  (. @string = t.val.Substring( 1, t.val.Length - 2 ); .)
                  "%>" 
                  {                    
                    Value<out valueStatement>                                      (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( valueStatement ); .)
                    |
                    Apply<out applyStatement>                                      (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( applyStatement ); .)
                    |
                    Call<out callStatement>                                        (. if (statements == null) statements = new List<RuleStatement>();
                                                                                   	  statements.Add( callStatement ); .)
                  }
                  SYNC "<%end%>"                                                   (. joinStatement = new JoinStatement( @string, statements ); .)
                  .
                  
Apply<out ApplyStatement applyStatement>                                           (. string methodName; string parameters = null; string from; .)
                =
                  "<%apply" ident                                                  (. methodName = t.val; .)
                   (                                                               (. int startPos = -1; int endPos = -1; .)
                     (
                      "(["                                                         (. startPos = t.pos + t.val.Length; .)
						{ ANY }                                                    (. endPos = la.pos; .)
					  "])" 
					  |
                      "("                                                          (. startPos = t.pos + t.val.Length; .)
                        { ANY }                                                    (. endPos = la.pos; .)
                      ")"
                     )                                                             (. if (startPos > 0 && endPos > 0)
                                                                                          parameters = scanner.buffer.GetString( startPos, endPos ).Trim(); .)
                   )                                                              
                   SYNC "from" ident                                               (. from = t.val; .)
                   SYNC "%>"                                                       (. applyStatement = new ApplyStatement( methodName, parameters, from ); .)
                   .
Code<out CodeStatement codeStatement, ref bool isStart>
                =
                  "<%$"                                                            (. int startPos = t.pos + t.val.Length; .)
                   {ANY}                                                           (. string value = scanner.buffer.GetString( startPos, la.pos ); .) 
                  ("$%>"
                   | "$-%>"                                                        (. isStart = true; .)
                  )
                                                                                   (. codeStatement = new CodeStatement( value.Trim() ); .)
                  .
                  
Call<out CallStatement callStatement>                                              (. string methodName; string parameters = null; .)
                =
                  "<%call" ident                                                   (. methodName = t.val; .)
                   (                                                               (. int startPos = -1; int endPos = -1; .)
                     (
                      "(["                                                         (. startPos = t.pos + t.val.Length; .)
						{ ANY }                                                    (. endPos = la.pos; .)
					  "])" 
					  |
                      "("                                                          (. startPos = t.pos + t.val.Length; .)
                        { ANY }                                                    (. endPos = la.pos; .)
                      ")"
                     )                                                             (. if (startPos > 0 && endPos > 0)
                                                                                          parameters = scanner.buffer.GetString( startPos, endPos ).Trim(); .)
                   )                                                              
                   SYNC "%>"                                                       (. callStatement = new CallStatement( methodName, parameters ); .)
                   .


Type<out WolfGenerator.Core.AST.Type type> =                                       (. StringBuilder name = new StringBuilder(); 
                                                                                      List<WolfGenerator.Core.AST.Type> genericParameters = null; .)
       ident                                                                       (. name.Append( t.val ); .)
        { "." 
        ident                                                                      (. name.Append( '.' ); name.Append( t.val ); .)
        } [                                                                        (. genericParameters = new List<WolfGenerator.Core.AST.Type>();
                                                                                      WolfGenerator.Core.AST.Type generic; .)
        "<" Type<out generic>                                                      (. genericParameters.Add( generic ); .)
        { "," Type<out generic>                                                    (. genericParameters.Add( generic ); .)
        } ">" ]                                                                    (. type = new WolfGenerator.Core.AST.Type( name.ToString(), genericParameters ); .)
        .

Var<out Variable var> =                                                            (. WolfGenerator.Core.AST.Type type; .)
      Type<out type> ident                                                         (. var = new Variable( t.val, type ); .)
      .

END WolfGenerator.