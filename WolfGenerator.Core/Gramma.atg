using System;
using System.Text;
using System.Collections.Generic;
using WolfGenerator.Core.AST;

COMPILER WolfGenerator

	public RuleClassStatement ruleClassStatement;

CHARACTERS
	letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
	digit     = "0123456789".
	cr        = '\r'.
	lf        = '\n'.
	tab       = '\t'.
	stringCh  = ANY - '"' - '\\' - cr - lf.
	charCh    = ANY - '\'' - '\\' - cr - lf.
	printable = '\u0020' .. '\u007e'.
	hex       = "0123456789abcdef".

TOKENS

	ident     = letter { letter | digit }.

	number    = digit { digit }.
	string    = '"' { stringCh | '\\' printable } '"'.
	badString = '"' { stringCh | '\\' printable } (cr | lf).
	char      = '\'' ( charCh | '\\' printable { hex } ) '\''.

IGNORE cr + lf + tab


PRODUCTIONS

WolfGenerator =                                                                    (. List<UsingStatement> usingStatementList = null; 
                                                                                      List<RuleMethodStatement> ruleMethodStatementList = null; 
                                                                                      string name; .) 
                RuleClassStart<out name> {                                         (. UsingStatement usingStatement; .)
                 Using<out usingStatement>                                         (. if (usingStatementList == null) usingStatementList = new List<UsingStatement>();
                                                                                      usingStatementList.Add( usingStatement ); .)
                 }
                {                                                                  (. RuleMethodStatement ruleMethod; .)
                 RuleMethod<out ruleMethod>                                        (. if (ruleMethodStatementList == null) 
                                                                                          ruleMethodStatementList = new List<RuleMethodStatement>();
                                                                                      ruleMethodStatementList.Add( ruleMethod ); .)
                 } RuleClassEnd                                                    (. ruleClassStatement = new RuleClassStatement( name, usingStatementList, ruleMethodStatementList ); .)
                 .

RuleClassStart<out string name> = "<%ruleclass" ident                              (. name = t.val; .)
                                   "%>".
RuleClassEnd   = "<%end%>".

Using<out UsingStatement usingStatement>                                                            
(. List<string> namespaceList = new List<string>(); .) 
=
	"<%using" ident                                                                     (. namespaceList.Add( t.val ); .)
	{ "."  ident                                                                        (. namespaceList.Add( t.val ); .)
	}                                                                                   (. string namespaceName = string.Join( ".", namespaceList.ToArray() );
	                                                                                       usingStatement = new UsingStatement( namespaceName ); .)
	"%>".

RuleMethod<out RuleMethodStatement statement>                                           (. string methodName; IList<Variable> variables; .)
                    = RuleMethodStart<out methodName, out variables>                    (. int startPos = t.pos + t.val.Length; .)
                     {ANY 
                      |                                                                 (. Console.WriteLine( "| '{0}'", scanner.buffer.GetString( startPos, la.pos ) ); .)
                      Value                     
                      } RuleMethodEnd                                                   (. statement = new RuleMethodStatement( methodName, variables, null ); .)
                      .

RuleMethodStart <. out string name, out IList<Variable> variables .>                  (. Variable var = null; 
                                                                                         List<Variable> variableList = null; .)
                = "<%rule" ident                                                      (. name = t.val; .) 
                  "(" [ Var<out var>                                                  (. if (variableList == null) variableList = new List<Variable>();
                                                                                         variableList.Add( var ); .)
                        { "," Var<out var>                                            (. variableList.Add( var ); .)
                        } ] ")" "%>"                                                  (. variables = variableList.AsReadOnly(); .)
                  .
RuleMethodEnd   = "<%end%>".

Value           = 
                  "<%="                                                               (. int pos = t.pos + 3; .)
                  {ANY                                                                (.  .)
                  }                                                                   
                  "%>"                                                                (. int endPos = t.pos;
                                                                                         string value = scanner.buffer.GetString( pos, endPos );
                                                                                         Console.WriteLine( "value: " + value );  .)
                  .

Type<out WolfGenerator.Core.AST.Type type> =                                          (. StringBuilder name = new StringBuilder(); 
                                                                                         List<WolfGenerator.Core.AST.Type> genericParameters = null; .)
       ident                                                                          (. name.Append( t.val ); .)
        { "." 
        ident                                                                         (. name.Append( '.' ); name.Append( t.val ); .)
        } [                                                                           (. genericParameters = new List<WolfGenerator.Core.AST.Type>();
                                                                                         WolfGenerator.Core.AST.Type generic; .)
        "<" Type<out generic>                                                         (. genericParameters.Add( generic ); .)
        { "," Type<out generic>                                                       (. genericParameters.Add( generic ); .)
        } ">" ]                                                                       (. type = new WolfGenerator.Core.AST.Type( name.ToString(), genericParameters ); .)
        .

Var<out Variable var> =                                                               (. WolfGenerator.Core.AST.Type type; .)
      Type<out type> ident                                                            (. var = new Variable( t.val, type ); .)
      .

END WolfGenerator.