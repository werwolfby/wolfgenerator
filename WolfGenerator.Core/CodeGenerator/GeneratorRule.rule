<%ruleclass Generator%>
<%using System.Linq%>
<%using WolfGenerator.Core.AST%>

<%rule Generate( string @namespace, RuleClassStatement ruleClassStatement, string fileName )%>
<%$
if (@namespace != null)
{
$-%>
namespace <%= @namespace %>
{
	<%call Class( ruleClassStatement, fileName )%>
}
<%$
}
else
{
$-%>
<%call Class( ruleClassStatement, fileName )%>
<%$
}
$-%>
<%end%>

<%rule Class( RuleClassStatement ruleClassStatement, string fileName )%>
<%join "\r\n"%>
	<%apply Using( item ) from ruleClassStatement.UsingStatements.Select( u => u.Namespace ).Concat( defaultNamespaces ).Distinct() %>
<%end%>

public partial class <%= ruleClassStatement.Name %> : GeneratorBase
{
	<%join "\r\n\r\n"%>
		<%apply Match( item, fileName ) from ruleClassStatement.MatchMethodGroups.Where( mmg => mmg.IsMatched ).SelectMany( mmg => mmg.MatchStatements )%>
	<%end%>
}
<%end%>

<%rule Match( MatchMethodStatement matchMethodStatement, string fileName )%>
[MatchMethod( "<%= matchMethodStatement.RuleMethod.Name %>", "<%= matchMethodStatement.Name %>", "<%= fileName %>" ]
private bool Match_<%= matchMethodStatement.RuleMethod.Name %>_<%= matchMethodStatement.Name %>(<%call MethodParamenters( matchMethodStatement.RuleMethod.Variables ) %>)
{
	<%= matchMethodStatement.Code %>
}
<%end%>

<%rule Rule( RuleMethodStatement ruleMethodStatement, string fileName, bool isDefault, bool generateAttribute )%>
<%$
if (generateAttribute)
{
$-%>
[RuleMethod( "<%= ruleMethodStatement.Name %>", "<%$ if (ruleMethodStatement.MatchMethodStatement != null){$%><%= ruleMethodStatement.MatchMethodStatement.Name %><%$}else{$%>null<%$}$%>", "<%= fileName %>" )]
<%$
}
$-%>
public CodeWriter <%= ruleMethodStatement.Name %><%$if (ruleMethodStatement.MatchMethodStatement != null){$%>_<%= ruleMethodStatement.Name %><%$}else if (isDefault){$%>_Default<%$}$%>(<%call MethodParamenters( ruleMethodStatement.Variables ) %>)
{
	var writer = new CodeWriter();

	<%join "\r\n"%>
		<%apply Statement( item, "writer" ) from ruleMethodStatement.Statements %>
	<%end%>

	return writer;
}
<%end%>

<%rule Statement( CallStatement call, string writerName )%>
<%= writerName %>.Append( this.Invoke( "<%= call.Name %>", <%= call.Parameters %> ) );
<%end%>

<%rule Statement( CodeStatement code, string writerName )%>
<%= code.Value %>
<%end%>

<%rule Statement( JoinStatement join, string writerName )%>
{
	var list = new List<CodeWriter>();
	CodeWriter temp;

	<%join "\r\n"%>
		<%apply JoinStatement( item, "temp" ) from join.Statements%>
	<%end%>

	writer.AppendType = AppendType.<%= join.AppendType.ToString() %>;
	for (var listI = 0; listI < list.Count; listI++)
	{
		var codeWriter = list[listI];
		<%= writerName %>.Append( codeWriter );
		if (listI < list.Count - 1)
			<%= writerName %>.AppendText( "<%= join.String %>" );
	}
	writer.AppendType = AppendType.EmptyLastLine;
}
<%end%>

<%rule Statement( TextStatement text, string writerName )%>
<%$if (text.Lines.Count == 0) return new CodeWriter(); 

var oldIndent = text.Lines[0].Indent;
$-%>
<%= writerName %>.Indent = <%= oldIndent.ToString() %>;
<%$
for (var i = 0; i < text.Lines.Count; i++)
{
	var line = text.Lines[i];

	if (oldIndent != line.Indent)
	{
$-%>
<%= writerName %>.Indent = <%= line.Indent.ToString() %>;
<%$
		oldIndent = line.Indent;
	}

	var generatedText = line.GetText().Replace( "\"", "\\\"" );
	string append;

	if (i == text.Lines.Count - 1 && !text.CropLastLine)
	{
		if (generatedText == "") continue;
		append = "Append";
	}
	else append = "AppendLine";
	
	string result;	
	if (generatedText == "") result = "";
	else                     result = " \"" + generatedText + "\" ";
$-%>
<%= writerName %>.<%= append %>(<%= result %>);
<%$}$-%>
<%end%>

<%rule Statement( ValueStatement value, string writerName )%>
<%= writerName %>.AppendText( <%= value.Value %> );
<%end%>

<%rule Using( UsingStatement usingStatement )%>
<%call Namespace( usingStatement.Namespace ) %>
<%end%>

<%rule Using( string @namespace )%>
using <%= @namespace %>;
<%end%>

<%rule MethodParamenters( IEnumerable<Variable> variables )%>
 <%join ", "%>
	<%apply Parameter( item ) from variables %>
<%end%> 
<%end%>

<%rule Parameter( Variable var )%>
<%= var.ToString() %>
<%end%>

<%end%>